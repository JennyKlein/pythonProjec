# Задача 1: разработать игру крестики-нолики для одного игрока, в качестве второго игрока будет выступать сама программа.
# Детали:
# 1. Игровое поле представляет собой квадрат 3x3.
# 2. Игрок и программа ходят по очереди, ставя на свободные клетки поля свои символы (игрок - "X", программа - "O").
# 3. Программа должна иметь простую стратегию для выбора хода (например, случайный выбор).
# 4. Игра заканчивается, когда один из игроков выстраивает три своих символа в ряд по горизонтали, вертикали или диагонали, либо когда все клетки поля заняты (ничья).
# 5. После каждого хода необходимо отображать текущее состояние игрового поля.
# 6. В конце игры выводится результат: победа игрока, победа программы или ничья.

# Задача 2: доработать программу из задачи 1, чтобы программа могла играть в крестики-нолики любого размера.

# Задача 3: разработать игру "угадай слово".
# Детали:
# 1. Программа выбирает случайное слово из списка.
# 2. Игрок должен угадать это слово, вводя по одной букве.
# 3. Если буква есть в слове, она появляется в нужном месте.
# 4. Игра заканчивается, когда игрок угадывает все буквы в слове или когда он использует все свои попытки.
# 5. В конце игры выводится результат: победа игрока, поражение или ничья.

# Задача 4: разработать программу, которая умеет зашифровывать и расшифровывать короткие текстовые сообщения методом шрифта Цезаря (или любым другим сдвиговым шифром).
# Детали
# 1. Пользователь вводит сам текст (например, фразу).
# 2. Указывает, хочет он «зашифровать» или «расшифровать» (логический выбор).
# 3. Вводит число сдвига (целое, например, от 1 до 25).
# 4. Программа пробегается по каждой букве во введённом тексте и смещает её в алфавите на заданное количество позиций.
#     - Для «зашифровки» двигаем вперёд (A→C при сдвиге 2).
#     - Для «расшифровки», наоборот, двигаем в обратную сторону.
# 5. Программа игнорирует пробелы, цифры, знаки препинания или обрабатывает их особо — по вашему желанию.
# 6. Выводит результат в консоль (зашифрованную строку или расшифрованную).
# 7. Спрашивает, хочет ли пользователь повторить, и организует цикл (например, while) до тех пор, пока не будет введена команда выхода.

# Задача 5: Упрощённый «Морской Бой» (5×5)
# 1. Поле — двумерный список (5×5), где каждая клетка может быть:
#    - `None` — пустая и не подбитая
#    - `'S'` — корабль (неподбитая часть)
#    - `'X'` — подбитая часть корабля
#    - `'O'` — подбитая пустая клетка (промах)
# 2. Расстановка кораблей:
#    - Происходит случайно: программа случайно выбирает ячейки для своего 1–2 «однопалубных» кораблей (или нужного количества).
#    - Аналогично расставляется корабль(и) игрока — тоже случайно (или зашито в коде).
# 3. Игровой процесс:
#    - Игра идёт пошагово:
#      - Игрок вводит координаты (x, y) для «выстрела» по полю компьютера.
#        - Если там `S`, меняем на `'X'` (попадание). Если было `None`, меняем на `'O'` (промах).
#        - Если координаты некорректны — повтор ввода.
#      - Программа «ходит» случайно, выбирая нестрелянную клетку на поле игрока. Аналогично отметки `X`/`O`.
#    - После каждого выстрела проверяется, остались ли символы `'S'` у соперника. Если нет — соперник проиграл.
# 4. Окончание:
#    - Игра продолжается, пока у кого-то не будут уничтожены все корабли (`'S'` больше нет).
#    - Объявляется победитель (игрок или программа).
# 5. Отображение:
#    - Можно после каждого хода печатать поле игрока (целиком) и поле компьютера (с теми же символами, но `'S'` скрывать до попадания).
#    - Хранить поля: `player_field` и `computer_field`, оба размером 5×5.