1. Что такое метод?
Определение методов
Метод — это именованный блок кода, который выполняет определенную задачу. Методы позволяют объединять команды в одно целое, чтобы сделать код более читаемым, организованным и переиспользуемым. В Python методы создаются с помощью ключевого слова def.

Методы обычно используются для:

Выполнения повторяющихся операций.
Разделения сложной задачи на более простые подзадачи.
Упрощения структуры программы.
Аналогии из реальной жизни
Чтобы понять, что такое метод, представьте следующие сценарии:

Рецепт приготовления блюда:

Рецепт — это метод. Он содержит пошаговую инструкцию (код) для приготовления определенного блюда.
Вы вызываете метод (готовите блюдо), следуя его инструкции.
Ингредиенты, которые вы используете, — это аргументы метода.
Кнопка включения света:

Нажатие кнопки — это вызов метода.
Действие — включение света.
Вы не думаете, как именно работает электричество — метод скрывает детали реализации.
Покупка билета в кино:

Вы выполняете действия: выбираете фильм, время сеанса, оплачиваете билет.
Все эти действия объединяются в метод, например, "купить билет".
Входные данные (аргументы) — фильм, время сеанса, количество билетов.
Результат — билет на сеанс.
Методы позволяют организовать действия в компактный, понятный и универсальный инструмент, который можно использовать многократно.

2. Как пишется метод?
Общий синтаксис метода
Метод в Python создается с использованием ключевого слова def. Общий вид метода:

def имя_метода(список_аргументов):
# инструкции
Copy
def — ключевое слово, которое указывает на создание метода.
имя_метода — название метода, которое описывает его действие.
список_аргументов — переменные, которые принимает метод (может быть пустым).
инструкции — тело метода, где прописаны шаги выполнения.
Ключевые элементы метода
Название метода

Должно быть понятно и описательно.
Следует использовать snake_case (например, calculate_sum, print_message).
Список аргументов

Аргументы — это входные данные для метода.
Они указываются в круглых скобках после имени метода.
Если метод не принимает аргументы, скобки оставляют пустыми.
Тело метода

Это блок кода, который выполняет задачу метода.
Все инструкции внутри метода должны быть с отступом (обычно 4 пробела).
Пример простого метода
Метод без аргументов:

def say_hello():
    print("Hello, world!")
Copy
Имя метода: say_hello.
Аргументы: отсутствуют.
Тело метода: выводит текст "Hello, world!".
Метод с аргументами:

def greet(name):
    print(f"Hello, {name}!")
Copy
Имя метода: greet.
Аргументы: name (имя человека).
Тело метода: выводит персонализированное приветствие.
Метод с возвращаемым значением:

def add_numbers(a, b):
    return a + b
Copy
Имя метода: add_numbers.
Аргументы: a и b (два числа).
Тело метода: вычисляет сумму двух чисел и возвращает результат.
Принципы написания методов
Давайте методам имена, которые отражают их суть.
Не забывайте про отступы для тела метода.
Старайтесь писать компактные методы, выполняющие одну задачу.
3. Аргументы метода
Понятие списка аргументов
Аргументы — это данные, которые передаются методу для выполнения его задачи. Они указываются в круглых скобках после имени метода. Аргументы позволяют методу быть гибким и работать с разными входными данными.

Список аргументов — это набор переменных, которые метод ожидает получить при вызове.
Если метод принимает несколько аргументов, они разделяются запятыми.
Пример метода с аргументами
def greet(name):
    print(f"Привет, {name}!")
Copy
name — это аргумент, который должен быть передан методу при вызове.
Метод использует этот аргумент для персонализации вывода.
При вызове метода: greet("Ильяс") Метод подставляет значение "Ильяс" вместо аргумента name.

Обязательные и необязательные аргументы
Обязательные аргументы
Должны быть переданы методу при вызове.
Если пропустить обязательный аргумент, Python выдаст ошибку.
Пример:

def multiply(a, b):
    print(a * b)


multiply(3, 4)  # Работает
multiply(3)  # Ошибка: отсутствует аргумент b
Copy
Необязательные аргументы
Могут иметь значение по умолчанию.
Если аргумент не передан, используется значение по умолчанию.
Пример:

def greet_with_default(name="друг"):
    print(f"Привет, {name}!")


greet_with_default()  # Привет, друг!
greet_with_default("Ильяс")  # Привет, Ильяс!
Copy
Почему это важно?
Обязательные аргументы позволяют методам быть точными и требовать необходимую информацию.
Необязательные аргументы делают методы более универсальными, позволяя использовать их без лишних данных.
Аргументы делают методы мощным инструментом, позволяя им работать с различными входными данными, без необходимости переписывать код.

Пример
4. Типы методов
Методы, которые выполняют действие, но ничего не возвращают
Такие методы используются для выполнения определенной задачи, но они не возвращают результат. Их задача — выполнить действие, например, вывести информацию на экран или записать данные в файл.

Характеристики:

Они ничего не возвращают, и в конце метода отсутствует ключевое слово return.
В Python такие методы возвращают значение None автоматически, если явно не указано return.
Пример:

def print_message(message):
    print(f"Сообщение: {message}")
Copy
Метод принимает аргумент message и выводит его на экран.
Возвращаемого значения у метода нет, он просто выполняет действие.
Использование: print_message("Привет!") # Сообщение: Привет!

Методы, которые возвращают значение
Эти методы возвращают результат своей работы, который можно сохранить в переменную, использовать в других вычислениях или передать другому методу.

Характеристики:

Такие методы используют ключевое слово return, чтобы передать результат обратно.
После выполнения команды return метод завершает свою работу.
Пример:

def add_numbers(a, b):
    return a + b


result = add_numbers(3, 5)
print(result)  # 8
Copy
Метод принимает два аргумента, складывает их и возвращает результат.
Значение возвращается вызвавшему коду.
Сравнение
Методы, которые ничего не возвращают, полезны для выполнения действий, не требующих обратной связи (например, вывод сообщения).
Методы, которые возвращают значение, удобны, когда нужно передать результат своей работы для дальнейшего использования.
Пример для сравнения:
# Метод без возвращаемого значения:
def greet(name):
    print(f"Привет, {name}!")


# Метод с возвращаемым значением:
def create_greeting(name):
    return f"Привет, {name}!"


greet("Ильяс")  # Выводит сообщение, но ничего не возвращает.
message = create_greeting("Ильяс")  # Создает строку и возвращает её.
print(message)  # Привет, Ильяс!
Copy
