1. Введение: Что такое логический тип данных?
Определение логического типа данных
Логический тип данных (bool) — это тип данных в Python, который используется для представления двух состояний: * истина* (True) и ложь (False). Эти значения помогают программе принимать решения на основе заданных условий.

Отличия от ранее изученных типов данных
str (строки): используются для работы с текстом, например, "Hello".
int (целые числа): для представления целых чисел, например, 5.
float (дробные числа): для представления чисел с плавающей точкой, например, 3.14.
bool (логический тип): отвечает на вопрос "истина или ложь?" с помощью значений True и False.
Тип данных	Пример значения	Пример использования
str	"Python"	Хранение текста
int	10	Счёт, возраст, количество чего-либо
float	3.14	Расчёты с дробными числами
bool	True или False	Проверка условий
Два логических значения
True: означает "истина", "да", "верно".
False: означает "ложь", "нет", "неверно".
Логические значения часто являются результатом сравнения или выполнения условия.

Пример использования
x = 5
y = 3

# Сравнение двух чисел возвращает логическое значение
is_x_greater = x > y  # True, потому что 5 больше 3
is_x_equal_to_y = x == y  # False, потому что 5 не равно 3

print(is_x_greater)  # Вывод: True
print(is_x_equal_to_y)  # Вывод: False
Copy
Логические значения широко используются в программировании для:

Проверки условий (например, если число больше 10, сделай что-то).
Принятия решений в программе.
Управления выполнением кода в зависимости от состояния.
2. Аналогия из жизни
Введение
Логический тип данных (bool) — это способ ответить на вопрос, который имеет только два возможных ответа: "да" (True) или "нет" (False). Такие вопросы мы задаём себе каждый день, даже не задумываясь. Эти "да" или "нет" помогают принимать решения.

Примеры из жизни
Идёт ли дождь?

Ответ: Да (True) или Нет (False).
Использование: Взять зонт, если идёт дождь.
Число больше 10?

Ответ: Да (True), если число больше 10, или Нет (False), если меньше.
Доступен ли товар в магазине?

Ответ: Да (True), если товар есть на складе, или Нет (False), если товара нет.
Включён ли свет в комнате?

Ответ: Да (True), если свет включён, или Нет (False), если выключен.
Применение в программировании
В программировании логические выражения используются для проверки условий. Например:

Запускать ли определённый код, если выполнено условие.
Проверять, соответствует ли введённое пользователем значение ожидаемому формату.
Решать, какую информацию выводить на экран в зависимости от состояния программы.
Пример использования:

is_raining = True  # Логическое значение
has_umbrella = False

if is_raining and not has_umbrella:
    print("Возьмите зонт!")  # Код выполняется, если идёт дождь, а зонта нет
Copy
3. Логические операции
Введение
Логические операции используются для комбинирования, инверсии и проверки условий. Они возвращают логическое значение: True или False. Эти операции применяются, когда нужно проверить сразу несколько условий или инвертировать результат.

Основные логические операции
and (И):

Возвращает True, если оба условия истинны.
Пример: "У вас есть вода и электричество?" Ответ будет True, только если есть и вода, и электричество.
or (ИЛИ):

Возвращает True, если хотя бы одно из условий истинно.
Пример: "Сегодня выходной или праздники?" Ответ будет True, если хотя бы одно из утверждений истинно.
not (НЕ):

Инвертирует значение. Если условие истинно (True), результат станет ложным (False), и наоборот.
Пример: "Не идёт ли дождь?" Если дождь идёт (True), результат будет False.
Пример использования
is_sunny = True
is_weekend = False
Copy
Операция and
sun_and_weekend = is_sunny and is_weekend # False, потому что только is_sunny истинно
Copy
Операция or
sun_or_weekend = is_sunny or is_weekend # True, потому что одно из условий истинно
Copy
Операция not
not_sunny = not is_sunny # False, потому что is_sunny — True
Copy
Практика
4. Использование булевых значений
Введение
Булевое значение (True или False) в Python можно получить из различных операций сравнения или проверки условий. Это позволяет программам анализировать данные и принимать решения.

Как получить булевое значение?
Сравнение чисел:

Булевое значение возвращается, если числа сравниваются с использованием операторов:
< (меньше)
> (больше)
== (равно)
!= (не равно)
<= (меньше или равно)
>= (больше или равно)
Пример: python 5 > 3 # True, потому что 5 больше 3 10 == 5 # False, потому что 10 не равно 5

Сравнение строк:

Строки сравниваются лексикографически (по алфавиту), например:
"apple" < "banana" — True, потому что "apple" идёт перед "banana".
"dog" == "Dog" — False, потому что Python учитывает регистр букв.
Пример: python "cat" > "bat" # True, потому что "cat" идёт после "bat" по алфавиту

Проверка на содержание (операция in):

Проверяет, содержится ли подстрока в строке. Пример: python "Python" in "I love Python" # True, потому что "Python" есть в строке
Получение булевых значений из строк
Введение
Строки в Python поддерживают различные методы, которые возвращают булевые значения (True или False). Эти методы помогают проверять наличие подстрок, соответствие началу или концу строки и сравнивать строки, игнорируя регистр. Такие методы полезны при обработке текстовых данных.

Основные методы
Оператор in и not in:

in: Проверяет, содержится ли подстрока в строке.
not in: Проверяет, отсутствует ли подстрока в строке.
Пример:

"Python" in "I love Python"  # True
"Java" not in "I love Python"  # True
Copy
startswith() и endswith():

startswith(prefix): Возвращает True, если строка начинается с указанного префикса.
endswith(suffix): Возвращает True, если строка заканчивается на указанный суффикс.
Пример:

"Hello, world!".startswith("Hello")  # True
"Hello, world!".endswith("world!")   # True
Copy
Сравнение строк с == и !=:

Можно сравнивать строки напрямую, но регистр учитывается.
Пример:

"apple" == "Apple"  # False, потому что строки в разных регистрах
Copy
Игнорирование регистра с помощью lower() и upper():
Python не имеет встроенного аналога equalsIgnoreCase, но это можно сделать с помощью приведения строк к одному регистру:
string1.lower() == string2.lower()
Copy
Пример: python "Hello".lower() == "hello".lower() # True
Применение методов
Эти методы помогают легко работать со строками:

Проверить, начинается ли строка с определённого слова.
Узнать, заканчивается ли строка на заданный символ.
Сравнить строки, игнорируя регистр.
Пример использования:

filename = "report.pdf"
print(filename.endswith(".pdf"))  # True
print("python".startswith("Py".lower()))  # True, приведение к нижнему регистру
Copy
Применение булевых значений
Булевое значение используется для проверки условий в коде:

Сравнить данные перед выполнением операций.
Узнать, соответствует ли строка или число заданным условиям.
Понять, содержится ли элемент в коллекции (например, в списке или строке).