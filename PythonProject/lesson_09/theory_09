Введение: Зачем нужны условные операторы в программировании?
Цели урока
Условные операторы позволяют программам принимать решения на основе заданных условий. Это важный инструмент в программировании, который помогает:

Реагировать на различные входные данные.
Управлять потоком выполнения программы.
Делать код гибким и адаптируемым к различным сценариям.
Что мы узнаем на уроке:
Зачем нужны условные операторы?

Как они помогают программам "думать" и адаптироваться.
Аналогия из жизни: "Если погода хорошая, я пойду гулять. Иначе останусь дома."
Как писать условные операторы (if, elif, else)?

Разберём синтаксис и научимся использовать каждую часть.
Комбинирование условий:

Изучим, как использовать логические операторы (and, or, not) для создания более сложных условий.
Практика:

Попробуем решить задачи, используя if, elif, else, чтобы закрепить материал.
1. Введение: Зачем нужны условные операторы?
Концепция принятия решений в программировании
В реальной жизни мы часто принимаем решения на основе различных условий. Например:

Если вы голодны, вы едите.
Если идёт дождь, вы берёте зонт.
Если светит солнце, вы надеваете очки.
В программировании условные операторы (if, elif, else) выполняют ту же функцию. Они позволяют программе:

Проверить условие.
Выбрать, какой код выполнить на основе этого условия.
Принять одно из нескольких решений.
Аналогия из жизни
Пример: "Если идёт дождь, возьми зонт. Иначе надень очки от солнца."

Условие: Идёт ли дождь?
Действие: Если дождь, то взять зонт. Если нет, то надеть очки.
Пример: "Если температура ниже 0°C, надень пальто. Если между 0°C и 15°C, возьми куртку. Иначе можешь надеть футболку."

Условия:
Если температура ниже 0°C.
Если температура от 0°C до 15°C.
Если температура выше 15°C.
Действия зависят от каждого условия.
2. Синтаксис и структура if, elif, else
Оператор if
Оператор if выполняет блок кода, если указанное условие истинно (True). Если условие ложно (False), код внутри if не выполняется.

Пример:

temperature = 30
if temperature > 25:
    print("Очень жарко!")  # Выполнится, если температура больше 25
Copy
Оператор elif
Оператор elif позволяет добавить дополнительные условия, если предыдущее условие было ложным. Можно использовать несколько elif для проверки нескольких условий.

Пример:

temperature = 15
if temperature > 25:
    print("Очень жарко!")
elif temperature > 10:
    print("Прохладно!")  # Выполнится, если температура между 10 и 25
Copy
Оператор else
Оператор else выполняет блок кода, если ни одно из предыдущих условий не было истинным. else всегда используется в конце.

Пример:

temperature = 5
if temperature > 25:
    print("Очень жарко!")
elif temperature > 10:
    print("Прохладно!")
else:
    print("Холодно!")  # Выполнится, если температура 10 или ниже
Copy
Структура if, elif, else
Структура условного оператора:

Начинается с if, проверяющего первое условие.
Дополняется одним или несколькими elif для проверки дополнительных условий.
Завершается else, который выполняется, если ни одно из условий не подошло.
Пример полной структуры:

score = 85
if score >= 90:
    print("Отлично!")
elif score >= 70:
    print("Хорошо!")
else:
    print("Попробуй снова!")  # Если балл меньше 70
Copy
3. Вложенные условия
Что такое вложенные условия?
Вложенные условия — это условия, написанные внутри других условий. Они позволяют проверять дополнительные критерии, если первое условие оказалось истинным (True). Это полезно, когда решение зависит от нескольких уровней проверки.

Как работают вложенные условия?
Сначала проверяется первое условие (if).
Если первое условие истинно (True), внутри него выполняется ещё одна проверка.
Можно продолжать добавлять вложенные условия по мере необходимости.
Пример: Проверка пользователя
is_logged_in = True
is_admin = False

if is_logged_in:  # Проверяем, авторизован ли пользователь
   if is_admin:  # Если авторизован, проверяем, является ли он администратором
   print("Добро пожаловать, администратор!")
else:
    print("Добро пожаловать, пользователь!")
else:
    print("Пожалуйста, войдите в систему.")
Copy
Важные моменты
Вложенные условия увеличивают сложность кода, поэтому их следует использовать только при необходимости.
Для читаемости кода старайтесь избегать слишком глубокой вложенности. Если вложенность велика, подумайте о переработке логики.
4. Использование логических выражений в условиях
Зачем использовать логические выражения в условиях?
Логические операторы and, or, not позволяют комбинировать несколько условий в одном операторе if. Это упрощает код и делает его более читаемым, избегая лишней вложенности.

Комбинирование условий
and:

Проверяет, истинны ли оба условия.
Условие будет истинным только если обе части возвращают True.
Пример:

age = 25
has_ticket = True
if age >= 18 and has_ticket:
    print("Вход разрешён")  # Выполнится, если возраст 18+ и есть билет
Copy
or:

Проверяет, истинно ли хотя бы одно из условий.
Условие будет истинным, если хотя бы одна часть возвращает True.
Пример:

is_weekend = False
is_holiday = True
if is_weekend or is_holiday:
    print("Можно отдыхать!")  # Выполнится, если выходной или праздник
Copy
not:

Инвертирует значение условия.
Если условие истинно, оно становится ложным, и наоборот.
Пример:

is_raining = False
if not is_raining:
    print("Идём гулять!")  # Выполнится, если дождя нет
Copy
Упрощение сложных решений
Комбинирование условий позволяет избежать длинных вложенных условий, делая код проще и понятнее.

Сравните:

Без логических операторов:

is_student = True
has_discount_card = False
if is_student:
    if has_discount_card:
        print("Скидка предоставлена")
Copy
С логическими операторами:

if is_student and has_discount_card:
    print("Скидка предоставлена")
Copy
5. Лучшие практики написания условных операторов
Делайте условия простыми и понятными
Условия должны быть читаемыми и легко понимаемыми. Чем проще логика, тем легче её понять и поддерживать.
Используйте понятные названия переменных, чтобы код был самодокументирующим.
Пример:

# Плохой пример
if x > 10 and y < 5:
   print("Ок")

# Хороший пример
is_valid_age = x > 10
is_low_risk = y < 5
if is_valid_age and is_low_risk:
   print("Ок")
Copy
Избегайте слишком глубоких вложенных условий
Вложенные условия затрудняют чтение и понимание кода.
Постарайтесь использовать логические операторы (and, or, not) или разнести логику на несколько частей.
Пример:

# Плохой пример: глубокая вложенность
if is_logged_in:
    if is_admin:
        if has_permission:
            print("Доступ разрешён")

# Хороший пример: упрощённая логика
if is_logged_in and is_admin and has_permission:
    print("Доступ разрешён")
Copy
Используйте комментарии для объяснения сложной логики
Если условие сложно или содержит несколько шагов, добавьте комментарии, чтобы объяснить его.
Комментарии особенно важны для условий, которые могут быть непонятны другим разработчикам.
Пример: python # Проверяем, что пользователь авторизован, имеет роль администратора и право доступа if is_logged_in and is_admin and has_permission: print("Доступ разрешён")
Подведение итогов
Следование этим практикам помогает сделать код более читаемым, поддерживаемым и понятным для других разработчиков.

6. Практические задачи
Цель
Закрепить материал по условным операторам, используя реальные задачи. Попрактиковаться в написании условий с помощью if, elif, else, а также в комбинировании условий с логическими операторами.

Примеры задач
Определение категории возраста.
Проверка допустимости пользователя.
Вычисление стоимости билетов в зависимости от возраста.
Определение типа числа (чётное, нечётное, отрицательное, положительное).
Выбор действия в зависимости от времени суток.